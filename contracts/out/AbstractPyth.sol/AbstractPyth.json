{"abi":[{"type":"function","name":"getEmaPrice","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getEmaPriceNoOlderThan","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"age","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getEmaPriceUnsafe","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getPrice","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getPriceNoOlderThan","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"age","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getPriceUnsafe","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}],"stateMutability":"view"},{"type":"function","name":"getUpdateFee","inputs":[{"name":"updateData","type":"bytes[]","internalType":"bytes[]"}],"outputs":[{"name":"feeAmount","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"getValidTimePeriod","inputs":[],"outputs":[{"name":"validTimePeriod","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"parsePriceFeedUpdates","inputs":[{"name":"updateData","type":"bytes[]","internalType":"bytes[]"},{"name":"priceIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"minPublishTime","type":"uint64","internalType":"uint64"},{"name":"maxPublishTime","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"priceFeeds","type":"tuple[]","internalType":"struct PythStructs.PriceFeed[]","components":[{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]},{"name":"emaPrice","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}]}],"stateMutability":"payable"},{"type":"function","name":"parsePriceFeedUpdatesUnique","inputs":[{"name":"updateData","type":"bytes[]","internalType":"bytes[]"},{"name":"priceIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"minPublishTime","type":"uint64","internalType":"uint64"},{"name":"maxPublishTime","type":"uint64","internalType":"uint64"}],"outputs":[{"name":"priceFeeds","type":"tuple[]","internalType":"struct PythStructs.PriceFeed[]","components":[{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]},{"name":"emaPrice","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}]}],"stateMutability":"payable"},{"type":"function","name":"priceFeedExists","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"exists","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"queryPriceFeed","inputs":[{"name":"id","type":"bytes32","internalType":"bytes32"}],"outputs":[{"name":"priceFeed","type":"tuple","internalType":"struct PythStructs.PriceFeed","components":[{"name":"id","type":"bytes32","internalType":"bytes32"},{"name":"price","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]},{"name":"emaPrice","type":"tuple","internalType":"struct PythStructs.Price","components":[{"name":"price","type":"int64","internalType":"int64"},{"name":"conf","type":"uint64","internalType":"uint64"},{"name":"expo","type":"int32","internalType":"int32"},{"name":"publishTime","type":"uint256","internalType":"uint256"}]}]}],"stateMutability":"view"},{"type":"function","name":"updatePriceFeeds","inputs":[{"name":"updateData","type":"bytes[]","internalType":"bytes[]"}],"outputs":[],"stateMutability":"payable"},{"type":"function","name":"updatePriceFeedsIfNecessary","inputs":[{"name":"updateData","type":"bytes[]","internalType":"bytes[]"},{"name":"priceIds","type":"bytes32[]","internalType":"bytes32[]"},{"name":"publishTimes","type":"uint64[]","internalType":"uint64[]"}],"outputs":[],"stateMutability":"payable"},{"type":"event","name":"PriceFeedUpdate","inputs":[{"name":"id","type":"bytes32","indexed":true,"internalType":"bytes32"},{"name":"publishTime","type":"uint64","indexed":false,"internalType":"uint64"},{"name":"price","type":"int64","indexed":false,"internalType":"int64"},{"name":"conf","type":"uint64","indexed":false,"internalType":"uint64"}],"anonymous":false},{"type":"error","name":"InvalidArgument","inputs":[]},{"type":"error","name":"NoFreshUpdate","inputs":[]},{"type":"error","name":"StalePrice","inputs":[]}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"getEmaPrice(bytes32)":"b5dcc911","getEmaPriceNoOlderThan(bytes32,uint256)":"711a2e28","getEmaPriceUnsafe(bytes32)":"9474f45b","getPrice(bytes32)":"31d98b3f","getPriceNoOlderThan(bytes32,uint256)":"a4ae35e0","getPriceUnsafe(bytes32)":"96834ad3","getUpdateFee(bytes[])":"d47eed45","getValidTimePeriod()":"e18910a3","parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":"4716e9c5","parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)":"accca7f9","priceFeedExists(bytes32)":"b5ec0261","queryPriceFeed(bytes32)":"caaf43f1","updatePriceFeeds(bytes[])":"ef9e5e28","updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":"b9256d28"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.27+commit.40a35a09\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidArgument\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoFreshUpdate\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"StalePrice\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"publishTime\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"}],\"name\":\"PriceFeedUpdate\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getEmaPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getEmaPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPrice\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"age\",\"type\":\"uint256\"}],\"name\":\"getPriceNoOlderThan\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"getPriceUnsafe\",\"outputs\":[{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"getUpdateFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getValidTimePeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"validTimePeriod\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"minPublishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPublishTime\",\"type\":\"uint64\"}],\"name\":\"parsePriceFeedUpdates\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed[]\",\"name\":\"priceFeeds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64\",\"name\":\"minPublishTime\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPublishTime\",\"type\":\"uint64\"}],\"name\":\"parsePriceFeedUpdatesUnique\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed[]\",\"name\":\"priceFeeds\",\"type\":\"tuple[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"priceFeedExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"exists\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"queryPriceFeed\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"price\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"int64\",\"name\":\"price\",\"type\":\"int64\"},{\"internalType\":\"uint64\",\"name\":\"conf\",\"type\":\"uint64\"},{\"internalType\":\"int32\",\"name\":\"expo\",\"type\":\"int32\"},{\"internalType\":\"uint256\",\"name\":\"publishTime\",\"type\":\"uint256\"}],\"internalType\":\"struct PythStructs.Price\",\"name\":\"emaPrice\",\"type\":\"tuple\"}],\"internalType\":\"struct PythStructs.PriceFeed\",\"name\":\"priceFeed\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"}],\"name\":\"updatePriceFeeds\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes[]\",\"name\":\"updateData\",\"type\":\"bytes[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"priceIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint64[]\",\"name\":\"publishTimes\",\"type\":\"uint64[]\"}],\"name\":\"updatePriceFeedsIfNecessary\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PriceFeedUpdate(bytes32,uint64,int64,uint64)\":{\"details\":\"Emitted when the price feed with `id` has received a fresh update.\",\"params\":{\"conf\":\"Confidence interval of the given price update.\",\"id\":\"The Pyth Price Feed ID.\",\"price\":\"Price of the given price update.\",\"publishTime\":\"Publish time of the given price update.\"}}},\"kind\":\"dev\",\"methods\":{\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getEmaPriceUnsafe(bytes32)\":{\"details\":\"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceNoOlderThan(bytes32,uint256)\":{\"details\":\"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getPriceUnsafe(bytes32)\":{\"details\":\"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use `getPriceNoOlderThan`.\",\"returns\":{\"price\":\"- please read the documentation of PythStructs.Price to understand how to use this safely.\"}},\"getUpdateFee(bytes[])\":{\"params\":{\"updateData\":\"Array of price update data.\"},\"returns\":{\"feeAmount\":\"The required fee in Wei.\"}},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.\",\"params\":{\"maxPublishTime\":\"maximum acceptable publishTime for the given `priceIds`.\",\"minPublishTime\":\"minimum acceptable publishTime for the given `priceIds`.\",\"priceIds\":\"Array of price ids.\",\"updateData\":\"Array of price update data.\"},\"returns\":{\"priceFeeds\":\"Array of the price feeds corresponding to the given `priceIds` (with the same order).\"}},\"parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range and uniqueness condition.\",\"params\":{\"maxPublishTime\":\"maximum acceptable publishTime for the given `priceIds`.\",\"minPublishTime\":\"minimum acceptable publishTime for the given `priceIds`.\",\"priceIds\":\"Array of price ids.\",\"updateData\":\"Array of price update data.\"},\"returns\":{\"priceFeeds\":\"Array of the price feeds corresponding to the given `priceIds` (with the same order).\"}},\"priceFeedExists(bytes32)\":{\"params\":{\"id\":\"The Pyth Price Feed ID of which to check its existence.\"}},\"queryPriceFeed(bytes32)\":{\"details\":\"Reverts if the price does not exist.\",\"params\":{\"id\":\"The Pyth Price Feed ID of which to fetch the PriceFeed.\"}},\"updatePriceFeeds(bytes[])\":{\"details\":\"Reverts if the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"updateData\":\"Array of price update data.\"}},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"details\":\"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.\",\"params\":{\"priceIds\":\"Array of price ids.\",\"publishTimes\":\"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`\",\"updateData\":\"Array of price update data.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getEmaPrice(bytes32)\":{\"notice\":\"This function is deprecated and is only kept for backward compatibility.\"},\"getEmaPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time.\"},\"getEmaPriceUnsafe(bytes32)\":{\"notice\":\"Returns the exponentially-weighted moving average price of a price feed without any sanity checks.\"},\"getPrice(bytes32)\":{\"notice\":\"This function is deprecated and is only kept for backward compatibility.\"},\"getPriceNoOlderThan(bytes32,uint256)\":{\"notice\":\"Returns the price that is no older than `age` seconds of the current time.\"},\"getPriceUnsafe(bytes32)\":{\"notice\":\"Returns the price of a price feed without any sanity checks.\"},\"getUpdateFee(bytes[])\":{\"notice\":\"Returns the required fee to update an array of price updates.\"},\"getValidTimePeriod()\":{\"notice\":\"This function is deprecated and is only kept for backward compatibility.\"},\"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)\":{\"notice\":\"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they are more recent than the current stored prices. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array.\"},\"parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)\":{\"notice\":\"Similar to `parsePriceFeedUpdates` but ensures the updates returned are the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp, this method will return the first update. This method may store the price updates on-chain, if they are more recent than the current stored prices.\"},\"priceFeedExists(bytes32)\":{\"notice\":\"Returns true if a price feed with the given id exists.\"},\"queryPriceFeed(bytes32)\":{\"notice\":\"Returns the price feed with given id.\"},\"updatePriceFeeds(bytes[])\":{\"notice\":\"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent.\"},\"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])\":{\"notice\":\"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"node_modules/@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol\":\"AbstractPyth\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@chainlink/=node_modules/@chainlink/\",\":@eth-optimism/=node_modules/@eth-optimism/\",\":@openzeppelin/=node_modules/@openzeppelin/\",\":@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@pythnetwork/=node_modules/@pythnetwork/\",\":@scroll-tech/=node_modules/@scroll-tech/\",\":@thirdweb-dev/=node_modules/@thirdweb-dev/\",\":createx/=lib/pyth-crosschain/lazer/contracts/evm/lib/createx/src/\",\":ds-test/=lib/wormhole-solidity-sdk/lib/forge-std/lib/ds-test/src/\",\":erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/\",\":erc721a-upgradeable/=node_modules/erc721a-upgradeable/\",\":eth-gas-reporter/=node_modules/eth-gas-reporter/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/\",\":hardhat/=node_modules/hardhat/\",\":openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":openzeppelin-foundry-upgrades/=lib/pyth-crosschain/target_chains/ethereum/sdk/stylus/pyth-mock-solidity/lib/openzeppelin-foundry-upgrades/src/\",\":pyth-crosschain/=lib/pyth-crosschain/\",\":solady/=node_modules/solady/\",\":solidity-stringutils/=lib/pyth-crosschain/target_chains/ethereum/sdk/stylus/pyth-mock-solidity/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/\",\":sstore2/=node_modules/@thirdweb-dev/dynamic-contracts/lib/sstore2/\",\":wormhole-ntt/=lib/wormhole-ntt/src/\",\":wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/\"]},\"sources\":{\"node_modules/@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol\":{\"keccak256\":\"0xdc8d5acf08f9e0545f7bf6d4c8a2ca9195ca9ca50e77fbd424a485cbdc1b8a08\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://bbe57a1986d3efe43c5355ac35bcee126be802e80a745a6a32c5e77275112d7c\",\"dweb:/ipfs/QmNNdppqdJe3yWoLH2VeFDztfP5DijodRpJk6GDrEiukkG\"]},\"node_modules/@pythnetwork/pyth-sdk-solidity/IPyth.sol\":{\"keccak256\":\"0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://02d1b71006ccdfd6402a2b72ea197babbd1b54c26a70ebb76a114f0ae8352f08\",\"dweb:/ipfs/QmbqfuvwriG3AEwYEwupUaQKgfxRYK6Qui99o6wQysPoP3\"]},\"node_modules/@pythnetwork/pyth-sdk-solidity/IPythEvents.sol\":{\"keccak256\":\"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://ad1c69d157eccb09ce248e1ec021f2e58b61dd36160f5be3973a7bea4a899f64\",\"dweb:/ipfs/QmW1yXsDrMsuQKxtZanSZXpyUW2QwnCKVoCjS5fC3NoSVY\"]},\"node_modules/@pythnetwork/pyth-sdk-solidity/PythErrors.sol\":{\"keccak256\":\"0xcd288c1da7de4223e6ecb36335385c5e7bfcbac0def035d8d9253db62b703112\",\"license\":\"Apache 2\",\"urls\":[\"bzz-raw://030a179c0ba04e71bf48d8d75acd180fb769d448776ec5fdbd32ed2b381dc7d3\",\"dweb:/ipfs/QmWZALnKedi6Jq8evBxVJMeY4XMrSQUpihJ2MoSGLZSnEA\"]},\"node_modules/@pythnetwork/pyth-sdk-solidity/PythStructs.sol\":{\"keccak256\":\"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894\",\"license\":\"Apache-2.0\",\"urls\":[\"bzz-raw://a404dbbc64183995326c345cae27601d37c783b3d9030c8dc0ab4943fa2bf1da\",\"dweb:/ipfs/QmfNFesQffYisafmJFbKHxVFSD8fY49X1z9f8N7qtfW8AX\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.27+commit.40a35a09"},"language":"Solidity","output":{"abi":[{"inputs":[],"type":"error","name":"InvalidArgument"},{"inputs":[],"type":"error","name":"NoFreshUpdate"},{"inputs":[],"type":"error","name":"StalePrice"},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32","indexed":true},{"internalType":"uint64","name":"publishTime","type":"uint64","indexed":false},{"internalType":"int64","name":"price","type":"int64","indexed":false},{"internalType":"uint64","name":"conf","type":"uint64","indexed":false}],"type":"event","name":"PriceFeedUpdate","anonymous":false},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getEmaPrice","outputs":[{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"stateMutability":"view","type":"function","name":"getEmaPriceNoOlderThan","outputs":[{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getEmaPriceUnsafe","outputs":[{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getPrice","outputs":[{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"uint256","name":"age","type":"uint256"}],"stateMutability":"view","type":"function","name":"getPriceNoOlderThan","outputs":[{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function","name":"getPriceUnsafe","outputs":[{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"stateMutability":"view","type":"function","name":"getUpdateFee","outputs":[{"internalType":"uint256","name":"feeAmount","type":"uint256"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getValidTimePeriod","outputs":[{"internalType":"uint256","name":"validTimePeriod","type":"uint256"}]},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64","name":"minPublishTime","type":"uint64"},{"internalType":"uint64","name":"maxPublishTime","type":"uint64"}],"stateMutability":"payable","type":"function","name":"parsePriceFeedUpdates","outputs":[{"internalType":"struct PythStructs.PriceFeed[]","name":"priceFeeds","type":"tuple[]","components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]},{"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]}]},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64","name":"minPublishTime","type":"uint64"},{"internalType":"uint64","name":"maxPublishTime","type":"uint64"}],"stateMutability":"payable","type":"function","name":"parsePriceFeedUpdatesUnique","outputs":[{"internalType":"struct PythStructs.PriceFeed[]","name":"priceFeeds","type":"tuple[]","components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]},{"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function","name":"priceFeedExists","outputs":[{"internalType":"bool","name":"exists","type":"bool"}]},{"inputs":[{"internalType":"bytes32","name":"id","type":"bytes32"}],"stateMutability":"view","type":"function","name":"queryPriceFeed","outputs":[{"internalType":"struct PythStructs.PriceFeed","name":"priceFeed","type":"tuple","components":[{"internalType":"bytes32","name":"id","type":"bytes32"},{"internalType":"struct PythStructs.Price","name":"price","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]},{"internalType":"struct PythStructs.Price","name":"emaPrice","type":"tuple","components":[{"internalType":"int64","name":"price","type":"int64"},{"internalType":"uint64","name":"conf","type":"uint64"},{"internalType":"int32","name":"expo","type":"int32"},{"internalType":"uint256","name":"publishTime","type":"uint256"}]}]}]},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"}],"stateMutability":"payable","type":"function","name":"updatePriceFeeds"},{"inputs":[{"internalType":"bytes[]","name":"updateData","type":"bytes[]"},{"internalType":"bytes32[]","name":"priceIds","type":"bytes32[]"},{"internalType":"uint64[]","name":"publishTimes","type":"uint64[]"}],"stateMutability":"payable","type":"function","name":"updatePriceFeedsIfNecessary"}],"devdoc":{"kind":"dev","methods":{"getEmaPriceNoOlderThan(bytes32,uint256)":{"details":"This function is a sanity-checked version of `getEmaPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getEmaPriceUnsafe(bytes32)":{"details":"This function returns the same price as `getEmaPrice` in the case where the price is available. However, if the price is not recent this function returns the latest available price. The returned price can be from arbitrarily far in the past; this function makes no guarantees that the returned price is recent or useful for any particular application. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use either `getEmaPrice` or `getEmaPriceNoOlderThan`.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getPriceNoOlderThan(bytes32,uint256)":{"details":"This function is a sanity-checked version of `getPriceUnsafe` which is useful in applications that require a sufficiently-recent price. Reverts if the price wasn't updated sufficiently recently.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getPriceUnsafe(bytes32)":{"details":"This function returns the most recent price update in this contract without any recency checks. This function is unsafe as the returned price update may be arbitrarily far in the past. Users of this function should check the `publishTime` in the price to ensure that the returned price is sufficiently recent for their application. If you are considering using this function, it may be safer / easier to use `getPriceNoOlderThan`.","returns":{"price":"- please read the documentation of PythStructs.Price to understand how to use this safely."}},"getUpdateFee(bytes[])":{"params":{"updateData":"Array of price update data."},"returns":{"feeAmount":"The required fee in Wei."}},"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":{"details":"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range.","params":{"maxPublishTime":"maximum acceptable publishTime for the given `priceIds`.","minPublishTime":"minimum acceptable publishTime for the given `priceIds`.","priceIds":"Array of price ids.","updateData":"Array of price update data."},"returns":{"priceFeeds":"Array of the price feeds corresponding to the given `priceIds` (with the same order)."}},"parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)":{"details":"Reverts if the transferred fee is not sufficient or the updateData is invalid or there is no update for any of the given `priceIds` within the given time range and uniqueness condition.","params":{"maxPublishTime":"maximum acceptable publishTime for the given `priceIds`.","minPublishTime":"minimum acceptable publishTime for the given `priceIds`.","priceIds":"Array of price ids.","updateData":"Array of price update data."},"returns":{"priceFeeds":"Array of the price feeds corresponding to the given `priceIds` (with the same order)."}},"priceFeedExists(bytes32)":{"params":{"id":"The Pyth Price Feed ID of which to check its existence."}},"queryPriceFeed(bytes32)":{"details":"Reverts if the price does not exist.","params":{"id":"The Pyth Price Feed ID of which to fetch the PriceFeed."}},"updatePriceFeeds(bytes[])":{"details":"Reverts if the transferred fee is not sufficient or the updateData is invalid.","params":{"updateData":"Array of price update data."}},"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":{"details":"Reverts if update is not needed or the transferred fee is not sufficient or the updateData is invalid.","params":{"priceIds":"Array of price ids.","publishTimes":"Array of publishTimes. `publishTimes[i]` corresponds to known `publishTime` of `priceIds[i]`","updateData":"Array of price update data."}}},"version":1},"userdoc":{"kind":"user","methods":{"getEmaPrice(bytes32)":{"notice":"This function is deprecated and is only kept for backward compatibility."},"getEmaPriceNoOlderThan(bytes32,uint256)":{"notice":"Returns the exponentially-weighted moving average price that is no older than `age` seconds of the current time."},"getEmaPriceUnsafe(bytes32)":{"notice":"Returns the exponentially-weighted moving average price of a price feed without any sanity checks."},"getPrice(bytes32)":{"notice":"This function is deprecated and is only kept for backward compatibility."},"getPriceNoOlderThan(bytes32,uint256)":{"notice":"Returns the price that is no older than `age` seconds of the current time."},"getPriceUnsafe(bytes32)":{"notice":"Returns the price of a price feed without any sanity checks."},"getUpdateFee(bytes[])":{"notice":"Returns the required fee to update an array of price updates."},"getValidTimePeriod()":{"notice":"This function is deprecated and is only kept for backward compatibility."},"parsePriceFeedUpdates(bytes[],bytes32[],uint64,uint64)":{"notice":"Parse `updateData` and return price feeds of the given `priceIds` if they are all published within `minPublishTime` and `maxPublishTime`. You can use this method if you want to use a Pyth price at a fixed time and not the most recent price; otherwise, please consider using `updatePriceFeeds`. This method may store the price updates on-chain, if they are more recent than the current stored prices. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array."},"parsePriceFeedUpdatesUnique(bytes[],bytes32[],uint64,uint64)":{"notice":"Similar to `parsePriceFeedUpdates` but ensures the updates returned are the first updates published in minPublishTime. That is, if there are multiple updates for a given timestamp, this method will return the first update. This method may store the price updates on-chain, if they are more recent than the current stored prices."},"priceFeedExists(bytes32)":{"notice":"Returns true if a price feed with the given id exists."},"queryPriceFeed(bytes32)":{"notice":"Returns the price feed with given id."},"updatePriceFeeds(bytes[])":{"notice":"Update price feeds with given update messages. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. Prices will be updated if they are more recent than the current stored prices. The call will succeed even if the update is not the most recent."},"updatePriceFeedsIfNecessary(bytes[],bytes32[],uint64[])":{"notice":"Wrapper around updatePriceFeeds that rejects fast if a price update is not necessary. A price update is necessary if the current on-chain publishTime is older than the given publishTime. It relies solely on the given `publishTimes` for the price feeds and does not read the actual price update publish time within `updateData`. This method requires the caller to pay a fee in wei; the required fee can be computed by calling `getUpdateFee` with the length of the `updateData` array. `priceIds` and `publishTimes` are two arrays with the same size that correspond to senders known publishTime of each priceId when calling this method. If all of price feeds within `priceIds` have updated and have a newer or equal publish time than the given publish time, it will reject the transaction to save gas. Otherwise, it calls updatePriceFeeds method to update the prices."}},"version":1}},"settings":{"remappings":["@chainlink/=node_modules/@chainlink/","@eth-optimism/=node_modules/@eth-optimism/","@openzeppelin/=node_modules/@openzeppelin/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@pythnetwork/=node_modules/@pythnetwork/","@scroll-tech/=node_modules/@scroll-tech/","@thirdweb-dev/=node_modules/@thirdweb-dev/","createx/=lib/pyth-crosschain/lazer/contracts/evm/lib/createx/src/","ds-test/=lib/wormhole-solidity-sdk/lib/forge-std/lib/ds-test/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","erc721a-upgradeable/=node_modules/erc721a-upgradeable/","eth-gas-reporter/=node_modules/eth-gas-reporter/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts-upgradeable/lib/halmos-cheatcodes/src/","hardhat/=node_modules/hardhat/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/pyth-crosschain/target_chains/ethereum/sdk/stylus/pyth-mock-solidity/lib/openzeppelin-foundry-upgrades/src/","pyth-crosschain/=lib/pyth-crosschain/","solady/=node_modules/solady/","solidity-stringutils/=lib/pyth-crosschain/target_chains/ethereum/sdk/stylus/pyth-mock-solidity/lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/","sstore2/=node_modules/@thirdweb-dev/dynamic-contracts/lib/sstore2/","wormhole-ntt/=lib/wormhole-ntt/src/","wormhole-solidity-sdk/=lib/wormhole-solidity-sdk/src/"],"optimizer":{"enabled":true,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"node_modules/@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol":"AbstractPyth"},"evmVersion":"cancun","libraries":{}},"sources":{"node_modules/@pythnetwork/pyth-sdk-solidity/AbstractPyth.sol":{"keccak256":"0xdc8d5acf08f9e0545f7bf6d4c8a2ca9195ca9ca50e77fbd424a485cbdc1b8a08","urls":["bzz-raw://bbe57a1986d3efe43c5355ac35bcee126be802e80a745a6a32c5e77275112d7c","dweb:/ipfs/QmNNdppqdJe3yWoLH2VeFDztfP5DijodRpJk6GDrEiukkG"],"license":"Apache-2.0"},"node_modules/@pythnetwork/pyth-sdk-solidity/IPyth.sol":{"keccak256":"0x217532ece69b8e472a6260b740c34aebfb5a299bbfed6392cf0458ed368be7ab","urls":["bzz-raw://02d1b71006ccdfd6402a2b72ea197babbd1b54c26a70ebb76a114f0ae8352f08","dweb:/ipfs/QmbqfuvwriG3AEwYEwupUaQKgfxRYK6Qui99o6wQysPoP3"],"license":"Apache-2.0"},"node_modules/@pythnetwork/pyth-sdk-solidity/IPythEvents.sol":{"keccak256":"0x7ca8e03315d4516d6833c425a52c43e8cacf2077492074d2d36ae5c17899c9c8","urls":["bzz-raw://ad1c69d157eccb09ce248e1ec021f2e58b61dd36160f5be3973a7bea4a899f64","dweb:/ipfs/QmW1yXsDrMsuQKxtZanSZXpyUW2QwnCKVoCjS5fC3NoSVY"],"license":"Apache-2.0"},"node_modules/@pythnetwork/pyth-sdk-solidity/PythErrors.sol":{"keccak256":"0xcd288c1da7de4223e6ecb36335385c5e7bfcbac0def035d8d9253db62b703112","urls":["bzz-raw://030a179c0ba04e71bf48d8d75acd180fb769d448776ec5fdbd32ed2b381dc7d3","dweb:/ipfs/QmWZALnKedi6Jq8evBxVJMeY4XMrSQUpihJ2MoSGLZSnEA"],"license":"Apache 2"},"node_modules/@pythnetwork/pyth-sdk-solidity/PythStructs.sol":{"keccak256":"0xade221177dda98ebd194c363f264ceea125bde0e6a7a72f7b54da3ac60316894","urls":["bzz-raw://a404dbbc64183995326c345cae27601d37c783b3d9030c8dc0ab4943fa2bf1da","dweb:/ipfs/QmfNFesQffYisafmJFbKHxVFSD8fY49X1z9f8N7qtfW8AX"],"license":"Apache-2.0"}},"version":1},"id":112}